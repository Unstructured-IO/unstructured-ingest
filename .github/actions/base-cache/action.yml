
name: 'Base Cache Build'
description: 'Restore the base python cache for CI to use, recreate if not found'
inputs:
  python-version:
    description: 'python version associated with the cache'
    required: true
  check-only:
    description: 'if set, will not restore the cache if it exists'
    default: "false"
runs:
  using: "composite"
  steps:
    - name: Compute cache key
      id: compute-key
      shell: bash
      working-directory: ${{ inputs.work-dir }}
      run: |
        lockfile_hash=$(sha256sum uv.lock | cut -d ' ' -f 1)
        cache_key="venv-uv-${{ runner.os }}-${{ inputs.python-version }}-${lockfile_hash}"
        echo "key=${cache_key}" >> "$GITHUB_OUTPUT"

    - name: Check for/restore base cache
      uses: actions/cache/restore@v4
      id: virtualenv-cache-restore
      with:
        path: |
          .venv
        key: ${{ steps.compute-key.outputs.key }}
        lookup-only: ${{ inputs.check-only }}

    - name: Install uv
      uses: astral-sh/setup-uv@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: Set up Python
      shell: bash
      run: uv python install

    - name: Setup virtual environment (no cache hit)
      if: steps.virtualenv-cache-restore.outputs.cache-hit != 'true'
      shell: bash
      run: |
        uv venv
        make install-dependencies
    - name: Save Cache
      if: steps.virtualenv-cache-restore.outputs.cache-hit != 'true'
      id: virtualenv-cache-save
      uses: actions/cache/save@v4
      with:
        path: |
          .venv
        key: ${{ steps.virtualenv-cache-restore.outputs.cache-primary-key }}


